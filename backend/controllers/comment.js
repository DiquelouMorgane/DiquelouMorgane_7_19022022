const Comment = require('../models/comment');
const fs = require('fs');

//Create a comment//
exports.createComment = (req, res, next) => {
    const commentObject = JSON.parse(req.body.comment);
    delete commentObject._id;
    const comment = new Comment({
        //Copy the request fields, except the Id which will be generated by the database//
        ...commentObject,
        //Create the picture URL//
        imageUrl: `${req.protocol}://${req.get('host')}/images/${req.file.filename}`
    });
    comment.save()
    .then(() => res.status(201).json({ message: 'Commentaire enregistré !'}))
    .catch(error => res.status(400).json({ error }));
};

//Get all comments of database//
exports.getAllComment = (req, res, next) => {
    Comment.find()
    .then(comments => res.status(200).json(comments))
    .catch(error => res.status(400).json({error}))
};

//Get one of the comments//
exports.getOneComment = (req, res, next) => {
    Comment.findOne({ _id: req.params.id })
    .then(comment => res.status(200).json(comment))
    .catch(error => res.status(404).json({error}));
};

//Modify a commment//
exports.modifyComment = (req, res, next) => {
    const commentObject = req.file ?
    {
        ...JSON.parse(req.body.comment),
        imageUrl: `${req.protocol}://${req.get('host')}/images/${req.file.filename}`
    } : { ...req.body };
    Comment.updateOne({ _id: req.params.id }, { ...commentObject, _id: req.params.id })
    .then(() => res.status(200).json({ message: 'Commentaire modifié !'}))
    .catch(error => res.status(400).json({ error }));
};

//Delete a comment//
exports.deleteComment = (req, res, next) => {
    Comment.findOne({ _id: req.params.id })
    .then(comment => {
        const filename = comment.imageUrl.split('/images/')[1];
        fs.unlink(`images/${filename}`, () => {
            Comment.deleteOne({ _id: req.params.id })
            .then(() => res.status(200).json({ message: 'Commentaire supprimé !'}))
            .catch(error => res.status(400).json({ error }));
        });
    })
    .catch(error => res.status(500).json({ error }));
};